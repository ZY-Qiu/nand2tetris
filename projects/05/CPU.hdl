// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15], b=instruction[0], out=j3); // j3
    And(a=instruction[15], b=instruction[1], out=j2); // j2
    And(a=instruction[15], b=instruction[2], out=j1); // j1

    And(a=instruction[15], b=instruction[3], out=d3, out=writeM); // d3
    And(a=instruction[15], b=instruction[4], out=d2); // d2
    And(a=instruction[15], b=instruction[5], out=d1); // d1

    And(a=instruction[15], b=instruction[6], out=c6); // c6
    And(a=instruction[15], b=instruction[7], out=c5); // c5
    And(a=instruction[15], b=instruction[8], out=c4); // c4
    And(a=instruction[15], b=instruction[9], out=c3); // c3
    And(a=instruction[15], b=instruction[10], out=c2); // c2
    And(a=instruction[15], b=instruction[11], out=c1); // c1
    And(a=instruction[15], b=instruction[12], out=ca); // a
    
    Not(in=instruction[15], out=not15);
    Mux16(a=ALUout, b=instruction, sel=not15, out=MuxA);
    Or(a=not15, b=instruction[5], out=loada);
    ARegister(in=MuxA, load=loada, out=aout, out[0..14]=addressM);

    DRegister(in=ALUout, load=d2, out=dout);
    Mux16(a=aout, b=inM, sel=ca, out=Muxm);
    ALU(x=dout, y=Muxm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUout, out=outM, zr=zr, ng=ng);

    And(a=zr, b=j2, out=jump1);
    And(a=ng, b=j1, out=jump2);
    Or(a=zr, b=ng, out=IsNotPos);
    Not(in=IsNotPos, out=IsPos);
    And(a=IsPos, b=j3, out=jump3);
    And(a=j1, b=j2, out=tempj);
    And(a=tempj, b=j3, out=jump4);
    Or(a=jump1, b=jump2, out=templ1);
    Or(a=templ1, b=jump3, out=templ2);
    Or(a=templ2, b=jump4, out=load);
    Not(in=load, out=inc);
    PC(in=aout,load=load,inc=inc,reset=reset, out[0..14]=pc);
}