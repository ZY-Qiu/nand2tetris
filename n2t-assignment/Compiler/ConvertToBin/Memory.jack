// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram;
    static array heap;
    static int freelist;
    static int block;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freelist = 0;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // first search through the freelist to find a segment which match the requirment that len(seg) <= size+2,
        //then carve the segment and add it to the block list, and finally return the data address of the new block
        var int listaddr, len, addr;
        let listaddr = freelist;
        let len = heap[listaddr+1];
        let addr = listaddr;
        while(true) {
            if(len < (size + 2)) {
                if(heap[listaddr+1]>(size+1)){
                    let len = heap[listaddr+1];
                    let addr = listaddr;
                }
            }
            else {
                if(heap[listaddr+1]>(size+1) & (heap[listaddr+1]<len)){
                    let len = heap[listaddr+1];
                    let addr = listaddr;
                }
            }
            let listaddr = heap[listaddr];
            if(listaddr = 0) {
                //if(heap[addr+1]<(size+2)) {
                //    do Output.printString("ERR: No memory of such size is found!");
                //}
                let block = addr + heap[addr+1] - size + 2;
                let heap[addr+1] = heap[addr+1] - size - 2;
                let heap[block-1] = size + 2;
                return block;
            }
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freelist;
        let freelist = o;

        return;
    }    
}
